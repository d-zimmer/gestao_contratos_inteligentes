name: Build, Test, and Deploy Python App to Azure

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db  # Banco temporário usado apenas nos testes
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set environment variables for tests
        run: |
          echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
          echo "DJANGO_SETTINGS_MODULE=gestao_contratos_inteligentes.settings.test" >> $GITHUB_ENV

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install -r requirements.txt

      - name: Run migrations for testing
        run: |
          . venv/bin/activate
          python manage.py migrate

      - name: Run tests with coverage
        run: |
          . venv/bin/activate
          coverage run --source='.' manage.py test
          coverage report
          coverage html
          
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov

      - name: Create .env file for deployment
        run: |
          echo "DJANGO_API_URL=https://gestaocontratosinteligentes-a3apaqfsc7b0abgh.brazilsouth-01.azurewebsites.net/api/" > .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "SEPOLIA_INFURA_URL=${{ secrets.SEPOLIA_INFURA_URL }}" >> .env

  build:
    runs-on: ubuntu-latest
    needs: test  # Garante que o build só ocorre se o job de testes passar

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Compile Solidity contract (se necessário)
        run: |
          source venv/bin/activate
          python scripts/compilar_contrato.py
        env:
          SEPOLIA_INFURA_URL: ${{ secrets.SEPOLIA_INFURA_URL }}

      - name: Apply Django migrations (prepare o banco para o deploy)
        run: |
          source venv/bin/activate
          python manage.py makemigrations
          python manage.py migrate

      - name: Create static files (para o caso de arquivos estáticos no Django)
        run: |
          source venv/bin/activate
          python manage.py collectstatic --no-input

      - name: Package app for deployment
        run: |
          zip -r release.zip ./* -x "venv/*" "*.git*" "*.github*" "__pycache__/*"
        shell: bash

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Só executa se o job de build tiver sucesso

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app  # Baixa o release.zip da fase de build

      - name: Unzip artifact for deployment
        run: unzip release.zip

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}  # Usa as credenciais do Azure armazenadas nos secrets

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'GestaoContratosInteligentes'  # Nome do seu App Service no Azure
          package: release.zip  # Define o pacote que será enviado
