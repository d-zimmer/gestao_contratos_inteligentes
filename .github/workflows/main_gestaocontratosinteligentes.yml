name: Deploy to Azure VM

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set environment variables for tests
        run: |
          echo "DJANGO_DB_NAME=test_db" >> $GITHUB_ENV
          echo "DJANGO_DB_USER=postgres" >> $GITHUB_ENV
          echo "DJANGO_DB_PASSWORD=postgres" >> $GITHUB_ENV
          echo "DJANGO_DB_HOST=localhost" >> $GITHUB_ENV
          echo "DJANGO_DB_PORT=5432" >> $GITHUB_ENV
          echo "DJANGO_ENV=test" >> $GITHUB_ENV

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Run migrations for testing
        run: |
          source venv/bin/activate
          python manage.py makemigrations

          python manage.py migrate --fake-initial

      - name: Run tests with coverage
        run: |
          source venv/bin/activate
          coverage run --source='.' manage.py test --settings=gestao_contratos_inteligentes.settings
          coverage report
          coverage html
        
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Set environment variables for production
        run: |
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> $GITHUB_ENV
          echo "DJANGO_API_URL=https://gestaocontratosinteligentes-a3apaqfsc7b0abgh.brazilsouth-01.azurewebsites.net" >> $GITHUB_ENV
          echo "PROD_DB_NAME=${{ secrets.PROD_DB_NAME }}" >> $GITHUB_ENV
          echo "PROD_DB_USER=${{ secrets.PROD_DB_USER }}" >> $GITHUB_ENV
          echo "PROD_DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}" >> $GITHUB_ENV
          echo "PROD_DB_HOST=${{ secrets.PROD_DB_HOST }}" >> $GITHUB_ENV
          echo "PROD_DB_PORT=${{ secrets.PROD_DB_PORT }}" >> $GITHUB_ENV
          echo "SEPOLIA_INFURA_URL=${{ secrets.SEPOLIA_INFURA_URL }}" >> $GITHUB_ENV
          echo "GANACHE_URL=${{ secrets.GANACHE_URL }}" >> $GITHUB_ENV
          echo "DJANGO_ALLOWED_HOSTS=.azurewebsites.net" >> $GITHUB_ENV
          echo "DJANGO_DEBUG=True" >> $GITHUB_ENV

      - name: Package app for deployment
        run: |
          zip -r release.zip ./* -x "venv/*" "*.git*" "*.github*" "__pycache__/*"
        shell: bash

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.AZURE_SSH_PRIVATE_KEY }}

      - name: Add VM to known hosts
        run: |
          ssh-keyscan -H 4.228.59.7 >> ~/.ssh/known_hosts

      - name: Upload release to VM
        run: |
          scp release.zip david_zimmermann@4.228.59.7:/home/david_zimmermann/

      - name: Install unzip and update packages on VM
        run: |
          ssh david_zimmermann@4.228.59.7 "sudo apt-get update && sudo apt-get install -y unzip"

      - name: Unzip release on VM
        run: |
          ssh david_zimmermann@4.228.59.7 "unzip -o /home/david_zimmermann/release.zip -d /home/david_zimmermann/projetos"

      - name: Set environment variables on VM
        run: |
          ssh david_zimmermann@4.228.59.7 "
            cat <<EOF > /home/david_zimmermann/projetos/.env
            PROD_DB_NAME='${{ secrets.PROD_DB_NAME }}'
            PROD_DB_USER='${{ secrets.PROD_DB_USER }}'
            PROD_DB_PASSWORD='${{ secrets.PROD_DB_PASSWORD }}'
            PROD_DB_HOST='${{ secrets.PROD_DB_HOST }}'
            PROD_DB_PORT='${{ secrets.PROD_DB_PORT }}'
            DJANGO_SECRET_KEY='${{ secrets.DJANGO_SECRET_KEY }}'
            SEPOLIA_INFURA_URL='${{ secrets.SEPOLIA_INFURA_URL }}'
            GANACHE_URL='${{ secrets.GANACHE_URL }}'
            DJANGO_DEBUG=True
            EOF
          "

      - name: Setup virtual environment and install dependencies on VM
        run: |
          ssh david_zimmermann@4.228.59.7 "
            cd /home/david_zimmermann/projetos &&
            python3 -m venv venv &&
            source venv/bin/activate &&
            pip install -r requirements.txt
          "

      - name: Run Django migrations on VM
        run: |
          ssh david_zimmermann@4.228.59.7 "
            cd /home/david_zimmermann/projetos &&
            source venv/bin/activate &&
            python manage.py makemigrations &&
            python manage.py migrate &&
            python manage.py migrate django_celery_results
          "

      - name: Collect Django static files on VM
        run: |
          ssh david_zimmermann@4.228.59.7 "
            cd /home/david_zimmermann/projetos &&
            source venv/bin/activate &&
            python manage.py collectstatic --no-input
          "

      - name: Restart Django and Nginx services on VM
        run: |
          ssh david_zimmermann@4.228.59.7 "
            sudo systemctl restart django_gunicorn.service &&
            sudo systemctl restart nginx.service &&
            sudo systemctl restart streamlit.service &&
            sudo systemctl restart ganache.service &&
            sudo systemctl restart postgresql.service
          "